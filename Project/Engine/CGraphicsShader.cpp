#include "pch.h"
#include "CGraphicsShader.h"

#include "CPathMgr.h"
#include "CDevice.h"

#include "jsoncpp.h"



namespace SHADER_EXTENSION
{
	constexpr const wchar_t* CSO = L".CSO";
	constexpr const wchar_t* FX = L".FX";
}


CGraphicsShader::CGraphicsShader()
	: CShader(eRES_TYPE::GRAPHICS_SHADER)
	, m_eTopology(D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST)
	, m_eRSType(eRASTERIZER_TYPE::CULL_BACK)
	, m_eDSType(eDEPTH_STENCIL_TYPE::LESS)
	, m_eBSType(eBLEND_STATE_TYPE::DEFAULT)
	, m_eShaderDomain(eSHADER_DOMAIN::_UNDEFINED)
	, m_arrShaderCode{}
	, m_bUseInstancing()
{
	
}

CGraphicsShader::~CGraphicsShader()
{
}

//bool CGraphicsShader::Save(const std::filesystem::path& _fileName)
//{
//	std::ifstream FileOpen(_fileName);
//	if (FileOpen.is_open())
//	{
//		Json::Value jsonVal;
//		FileOpen >> jsonVal;
//		FileOpen.close();
//
//		return SaveJson(&jsonVal);
//	}
//
//	return false;
//}

bool CGraphicsShader::SaveJson(Json::Value* _jsonVal)
{
	if (false == CShader::SaveJson(_jsonVal))
		return false;

	Json::Value& jVal = *_jsonVal;

	string comment = "//Enumeration Values are at define.h of Engine project";
	jVal.setComment(comment, Json::CommentPlacement::commentAfter);

	//순회를 돌면서 비트마스크를 만들어준뒤 json 파일에 저장한다.
	int flagPipeline = 0;
	for (int i = 0; i < (int)eSHADER_TYPE::END; ++i)
	{
		bool bExist = false;

		switch ((eSHADER_TYPE)i)
		{
		case eSHADER_TYPE::__VERTEX:
			if (nullptr != m_VS.Get())
				bExist = true;
			break;
		case eSHADER_TYPE::__HULL:
			if(nullptr != m_HS.Get())
				bExist = true;
			break;
		case eSHADER_TYPE::__DOMAIN:
			if (nullptr != m_DS.Get())
				bExist = true;
			break;
		case eSHADER_TYPE::__GEOMETRY:
			if (nullptr != m_GS.Get())
				bExist = true;
			break;
		case eSHADER_TYPE::__PIXEL:
			if (nullptr != m_PS.Get())
				bExist = true;
			break;

		default:
			break;
		}

		if (true == bExist)
			flagPipeline |= 1 << i;
	}

	using namespace RES_INFO::SHADER;
	jVal[GRAPHICS::JSON_KEY::eSHADER_PIPELINE_STAGE] = flagPipeline;
	jVal[GRAPHICS::JSON_KEY::bIsAutoGenerated] = false;

	jVal[GRAPHICS::JSON_KEY::D3D_PRIMITIVE_TOPOLOGY] = (int)m_eTopology;

	jVal[GRAPHICS::JSON_KEY::eRASTERIZER_TYPE] = (int)m_eRSType;
	jVal[GRAPHICS::JSON_KEY::eDEPTH_STENCIL_TYPE] = (int)m_eDSType;
	jVal[GRAPHICS::JSON_KEY::eBLEND_STATE_TYPE] = (int)m_eBSType;
	jVal[GRAPHICS::JSON_KEY::eSHADER_DOMAIN] = (int)m_eShaderDomain;
	jVal[GRAPHICS::JSON_KEY::m_bUseInstancing] = m_bUseInstancing;

	//쉐이더의 이름을 저장(없어도 저장)
	for (int i = 0; i < (int)eSHADER_TYPE::END; ++i)
	{
		jVal[GRAPHICS::JSON_KEY::arr_strKey_PipeLine[i]] = m_arrShaderCode[i].strKey;
	}

	return true;
}

bool CGraphicsShader::LoadJson(Json::Value* _jsonVal)
{
	if (false == CShader::LoadJson(_jsonVal))
		return false;

	const Json::Value& jVal = *_jsonVal;

#define CHECK_LOAD_ERROR(_strKey) \
if (false == jVal.isMember(_strKey))\
	throw(std::runtime_error(_strKey + string(" Load Failed!!")))

	try
	{
		{
			string strKey = RES_INFO::SHADER::GRAPHICS::JSON_KEY::eBLEND_STATE_TYPE;
			CHECK_LOAD_ERROR(strKey);
			m_eBSType = (eBLEND_STATE_TYPE)jVal[strKey].asInt();
		}

		{
			string strKey = RES_INFO::SHADER::GRAPHICS::JSON_KEY::eDEPTH_STENCIL_TYPE;
			CHECK_LOAD_ERROR(strKey);
			m_eDSType = (eDEPTH_STENCIL_TYPE)jVal[strKey].asInt();
		}

		{
			string strKey = string(RES_INFO::SHADER::GRAPHICS::JSON_KEY::eRASTERIZER_TYPE);
			CHECK_LOAD_ERROR(strKey);
			m_eRSType = (eRASTERIZER_TYPE)jVal[strKey].asInt();
		}

		{
			string strKey = string(RES_INFO::SHADER::GRAPHICS::JSON_KEY::D3D_PRIMITIVE_TOPOLOGY);
			CHECK_LOAD_ERROR(strKey);
			m_eTopology = (D3D11_PRIMITIVE_TOPOLOGY)jVal[strKey].asInt();
		}

		{
			string strKey = string(RES_INFO::SHADER::GRAPHICS::JSON_KEY::eSHADER_DOMAIN);
			CHECK_LOAD_ERROR(strKey);
			m_eShaderDomain = (eSHADER_DOMAIN)jVal[strKey].asInt();
		}


		if (eSHADER_DOMAIN::_UNDEFINED == m_eShaderDomain)
		{
			string errorMessage = "The shader domain value of ";
			errorMessage += GetName();
			errorMessage += " is Not set. May cause error.";
			throw(std::runtime_error(errorMessage));
		}

		{
			string strKey = RES_INFO::SHADER::GRAPHICS::JSON_KEY::m_bUseInstancing;
			CHECK_LOAD_ERROR(strKey);
			m_bUseInstancing = jVal[strKey].asBool();
		}

		//자동 생성된 코드인지 여부 확인
		bool bIsAutoGenerated = false;
		{
			string strKey = RES_INFO::SHADER::GRAPHICS::JSON_KEY::bIsAutoGenerated;
			CHECK_LOAD_ERROR(strKey);
			bIsAutoGenerated = jVal[strKey].asBool();
		}

		int ShaderOrder = 0;
		int flagPipeline = jVal[string(RES_INFO::SHADER::GRAPHICS::JSON_KEY::eSHADER_PIPELINE_STAGE)].asInt();

		for (int i = 0; i < (int)eSHADER_TYPE::END; ++i)
		{
			std::filesystem::path shaderPath = GETRESPATH;
			string strKeyShader;

			//자동 생성된 코드일 경우 정규화된 파일명을 만들어서 진행
			if (bIsAutoGenerated)
			{
				//특정 쉐이더 사용 설정이 되어있을 경우 쉐이더 로드 시행
				if ((1 << i) & flagPipeline)
				{
					++ShaderOrder;

					shaderPath /= "S_";
					shaderPath += std::to_string(ShaderOrder);
					shaderPath += RES_INFO::SHADER::GRAPHICS::arrPrefix[i];
					shaderPath += GetName();
				}
				else
				{
					if (0 == i)
						throw("Vertex Shader must exist, but it is not.");
					continue;
				}
			}

			//직접 쉐이더를 지정한 json 파일의 경우
			else
			{
				string strKey = RES_INFO::SHADER::GRAPHICS::JSON_KEY::arr_strKey_PipeLine[i];

				//쉐이더 파이프라인 키가 아예 존재하지 않거나 비어있을 경우 다음 단계로 진행
				if (false == jVal.isMember(strKey) || jVal[strKey].asString().empty())
				{
					//버텍스 쉐이더가 없을 경우 무조건 에러 발생
					if (0 == i)
					{
						throw(std::runtime_error("Vertex Shader must exist, but it is not."));
					}
					continue;
				}
					
				strKeyShader = jVal[strKey].asString();
				std::filesystem::path path = GETRESPATH;
				path /= strKeyShader;
			}

			//위에서 만든 파일명을 토대로 디스크에서 파일을 열어준다.
			std::ios_base::openmode openFlag = std::ios_base::ate | std::ios_base::binary; std::ios_base::in;
			std::ifstream sFile(shaderPath, openFlag);

			
			if (false == sFile.is_open())
				throw(std::runtime_error(string("Failed to open File.\n") + shaderPath.string()));

			//파일이 열리면 지역변수 Blob을 만들어서 데이터를 옮긴다.
			tShaderCode sCode = {};
			sCode.strKey = strKeyShader;

			//Blob 내부에 공간을 할당.
			HRESULT hr = D3DCreateBlob(sFile.tellg(), sCode.blob.GetAddressOf());
			if (FAILED(hr))
			{
				throw(std::runtime_error(string("Shader Blob Creation Failed.\nError Code: ") + std::to_string(hr)));
			}

			//커서를 처음으로 돌린 후 파일을 읽어준다.
			sFile.seekg(0, std::ios_base::beg);
			sFile.read((char*)sCode.blob->GetBufferPointer(), sCode.blob->GetBufferSize());
			sFile.close();

			//읽어온 바이트 코드로부터 쉐이더를 로딩해준다.
			//실패시 동적할당 해제하고 오류 발생
			hr = CreateShader(sCode, (eSHADER_TYPE)i);
			if (FAILED(hr))
			{
				throw(std::runtime_error(string("Shader Blob Creation Failed.\nError Code: ") + std::to_string(hr)));
			}

		}


	}
	catch (const std::runtime_error& _err)
	{
		ERROR_MESSAGE(_err.what());
		return false;
	}


	return true;
}

//bool CGraphicsShader::Load(const std::filesystem::path& _fileName)
//{
//	std::filesystem::path shaderPath = RELATIVE_PATH::SHADER_GRAPHICS::A;
//	shaderPath /= _fileName;
//
//	std::ifstream fpShader(shaderPath);
//	if (fpShader.is_open())
//	{
//		Json::Value shaderInfo;
//		fpShader >> shaderInfo;
//
//		return LoadJson(&shaderInfo);
//	}
//	
//	return false;
//}

HRESULT CGraphicsShader::CreateDefaultInputLayout()
{
	// InputLayout 생성
	constexpr UINT uNumDesc = 2u;
	D3D11_INPUT_ELEMENT_DESC LayoutDesc[uNumDesc] = {};

	LayoutDesc[0].SemanticName = "POSITION";
	LayoutDesc[0].SemanticIndex = 0;
	LayoutDesc[0].AlignedByteOffset = 0;
	LayoutDesc[0].Format = DXGI_FORMAT_R32G32B32_FLOAT;
	LayoutDesc[0].InputSlot = 0;
	LayoutDesc[0].InputSlotClass = D3D11_INPUT_PER_VERTEX_DATA;
	LayoutDesc[0].InstanceDataStepRate = 0;
	

	//LayoutDesc[1].SemanticName = "COLOR";
	//LayoutDesc[1].SemanticIndex = 0;

	////이전 시멘틱에서 얼마나 떨어졌는지 여부를 저장. 0번 인덱스는 R32B32G32(4+4+4 = 12) 이므로 오프셋을 12로 잡아준다.
	//LayoutDesc[1].AlignedByteOffset = 12;					
	//LayoutDesc[1].Format = DXGI_FORMAT_R32G32B32A32_FLOAT;
	//LayoutDesc[1].InputSlot = 0;
	//LayoutDesc[1].InputSlotClass = D3D11_INPUT_PER_VERTEX_DATA;
	//LayoutDesc[1].InstanceDataStepRate = 0;

	LayoutDesc[1].SemanticName = "TEXCOORD";
	LayoutDesc[1].SemanticIndex = 0;

	//0번 인덱스1: 12 , 1번 인덱스 : R32B32G32A32(4 * 4 = 16) -> 12 + 16 = 28
	LayoutDesc[1].AlignedByteOffset = 12;
	LayoutDesc[1].Format = DXGI_FORMAT_R32G32_FLOAT;
	LayoutDesc[1].InputSlot = 0;
	LayoutDesc[1].InputSlotClass = D3D11_INPUT_PER_VERTEX_DATA;
	LayoutDesc[1].InstanceDataStepRate = 0;
	

	//Vertex Buffer Blob을 참조해서 입력 레이아웃을 생성한다.
	ComPtr<ID3DBlob>& VSData = m_arrShaderCode[(int)eSHADER_TYPE::__VERTEX].blob;
	return DEVICE->CreateInputLayout(LayoutDesc, uNumDesc, VSData->GetBufferPointer(), VSData->GetBufferSize(), m_InputLayout.ReleaseAndGetAddressOf());

}


HRESULT CGraphicsShader::CreateShader(char* _pShaderByteCode, size_t _ShaderByteCodeSize, eSHADER_TYPE _ShaderType, const string& _strKeyShader)
{
	if (nullptr == _pShaderByteCode || (size_t)0 == _ShaderByteCodeSize)
		return E_POINTER;

	tShaderCode sCode = {};
	HRESULT hr = D3DCreateBlob(_ShaderByteCodeSize, sCode.blob.GetAddressOf());
	if (FAILED(hr))
		return hr;

	memcpy(sCode.blob->GetBufferPointer(), _pShaderByteCode, _ShaderByteCodeSize);

	return CreateShader(sCode, _ShaderType);
}

HRESULT CGraphicsShader::CreateShader(const wstring& _strFileName, const string& _strFuncName, eSHADER_TYPE _ShaderType)
{
	// 1. Shader 파일 경로 받아옴
	std::filesystem::path shaderPath = GETRESPATH;
	shaderPath /= _strFileName;

	char ShaderNameVersion[32] = {};
	//2. 쉐이더 타입에 따른 다른 파라미터용 변수를 할당
	switch (_ShaderType)
	{
	case eSHADER_TYPE::__VERTEX:
		strcpy_s(ShaderNameVersion, 32u, SHADER_NAME_VERSION::VS);
		break;

	case eSHADER_TYPE::__HULL:
		strcpy_s(ShaderNameVersion, 32u, SHADER_NAME_VERSION::HS);
		break;

	case eSHADER_TYPE::__DOMAIN:
		strcpy_s(ShaderNameVersion, 32u, SHADER_NAME_VERSION::DS);
		break;

	case eSHADER_TYPE::__GEOMETRY:
		strcpy_s(ShaderNameVersion, 32u, SHADER_NAME_VERSION::GS);
		break;

	case eSHADER_TYPE::__PIXEL:
		strcpy_s(ShaderNameVersion, 32u, SHADER_NAME_VERSION::PS);
		break;

	default:
		//에러 발생시킴
		assert((int)eSHADER_TYPE::END == 0);
		break;
	}

	// Shader Compile
	HRESULT hr = D3DCompileFromFile(shaderPath.wstring().c_str(), nullptr, D3D_COMPILE_STANDARD_FILE_INCLUDE
		, _strFuncName.c_str(), ShaderNameVersion, 0, 0, m_arrShaderCode[(int)_ShaderType].blob.ReleaseAndGetAddressOf(), m_ErrBlob.ReleaseAndGetAddressOf());

	if(FAILED(hr))
	{
		MessageBoxA(nullptr, (const char*)m_ErrBlob->GetBufferPointer()
			, "Vertex Shader Compile Failed!!", MB_OK);
		assert(SUCCEEDED(hr));
		return hr;
	}

	return CreateShader(_ShaderType);
}



HRESULT CGraphicsShader::CreateShader(eSHADER_TYPE _ShaderType)
{
	int i = (int)_ShaderType;
	ComPtr<ID3DBlob>& Data = m_arrShaderCode[i].blob;
	const void* pBuffer = Data->GetBufferPointer();
	size_t BufferSize = Data->GetBufferSize();

	switch (_ShaderType)
	{
	case eSHADER_TYPE::__VERTEX:
	{
		HRESULT hr = DEVICE->CreateVertexShader(pBuffer, BufferSize, nullptr, m_VS.ReleaseAndGetAddressOf());

		if (SUCCEEDED(hr))
			CreateDefaultInputLayout();
		
		return hr;

		break;
	}

		
	case eSHADER_TYPE::__HULL:
		return DEVICE->CreateHullShader(pBuffer, BufferSize, nullptr, m_HS.ReleaseAndGetAddressOf());
		break;

	case eSHADER_TYPE::__DOMAIN:
		return DEVICE->CreateDomainShader(pBuffer, BufferSize, nullptr, m_DS.ReleaseAndGetAddressOf());
		break;

	case eSHADER_TYPE::__GEOMETRY:
		return DEVICE->CreateGeometryShader(pBuffer, BufferSize, nullptr, m_GS.ReleaseAndGetAddressOf());
		break;

	case eSHADER_TYPE::__PIXEL:
		return DEVICE->CreatePixelShader(pBuffer, BufferSize, nullptr, m_PS.ReleaseAndGetAddressOf());
		break;

	default:
		return E_FAIL;
	}
}

//void CGraphicsShader::CreateVertexShader(const wstring& _strFileName, const string& _strFuncName)
//{
//	// Shader 파일 경로
//	wstring strShaderFile = CPathMgr::GetInst()->GetContentAbsPathW();
//	strShaderFile += _strFileName;
//
//	// VertexShader Compile
//	if (FAILED(D3DCompileFromFile(strShaderFile.c_str(), nullptr, D3D_COMPILE_STANDARD_FILE_INCLUDE
//		, _strFuncName.c_str(), "vs_5_0", 0, 0, m_VSBlob.GetAddressOf(), m_ErrBlob.GetAddressOf())))
//	{
//		MessageBoxA(nullptr, (const char*)m_ErrBlob->GetBufferPointer()
//			, "Vertex Shader Compile Failed!!", MB_OK);
//	}
//
//	// 컴파일된 객체로 VertexShader, PixelShader 를 만든다.
//	DEVICE->CreateVertexShader(m_VSBlob->GetBufferPointer(), m_VSBlob->GetBufferSize()
//		, nullptr, m_VS.GetAddressOf());
//
//	m_ShaderLoadType[eShaderType]
//	AddPipeLineStage(eSHADER_PIPELINE_STAGE::__VERTEX);
//}
//
//void CGraphicsShader::CreatePixelShader(const wstring& _strFileName, const string& _strFuncName)
//{
//	// Shader 파일 경로
//	wstring strShaderFile = CPathMgr::GetInst()->GetContentAbsPathW();
//	strShaderFile += _strFileName;
//
//
//	// PixelShader Compile	
//	if (FAILED(D3DCompileFromFile(strShaderFile.c_str(), nullptr, D3D_COMPILE_STANDARD_FILE_INCLUDE
//		, _strFuncName.c_str(), "ps_5_0", 0, 0, m_PSBlob.GetAddressOf(), m_ErrBlob.GetAddressOf())))
//	{
//		MessageBoxA(nullptr, (const char*)m_ErrBlob->GetBufferPointer()
//			, "Pixel Shader Compile Failed!!", MB_OK);
//	}
//
//	// 컴파일된 객체로 PixelShader 를 만든다.
//	DEVICE->CreatePixelShader(m_PSBlob->GetBufferPointer(), m_PSBlob->GetBufferSize()
//		, nullptr, m_PS.GetAddressOf());
//
//	AddPipeLineStage(eSHADER_PIPELINE_STAGE::__PIXEL);
//}

//void CGraphicsShader::CreateVertexShader(void* _pShaderByteCode, size_t _ShaderByteCodeSize)
//{
//
//	D3DCreateBlob(_ShaderByteCodeSize, &m_Blob[(int)eSHADER_TYPE::__VERTEX]);
//
//	//Vertex Shader Compilation by included header
//	DEVICE->CreateVertexShader(_pShaderByteCode, _ShaderByteCodeSize, nullptr, m_VS.GetAddressOf());
//	
//	// InputLayout 생성
//	D3D11_INPUT_ELEMENT_DESC LayoutDesc[3] = {};
//
//	LayoutDesc[0].SemanticName = "POSITION";
//	LayoutDesc[0].SemanticIndex = 0;
//	LayoutDesc[0].AlignedByteOffset = 0;
//	LayoutDesc[0].Format = DXGI_FORMAT_R32G32B32_FLOAT;
//	LayoutDesc[0].InputSlot = 0;
//	LayoutDesc[0].InputSlotClass = D3D11_INPUT_PER_VERTEX_DATA;
//	LayoutDesc[0].InstanceDataStepRate = 0;
//
//	LayoutDesc[1].SemanticName = "COLOR";
//	LayoutDesc[1].SemanticIndex = 0;
//	LayoutDesc[1].AlignedByteOffset = 12;
//	LayoutDesc[1].Format = DXGI_FORMAT_R32G32B32A32_FLOAT;
//	LayoutDesc[1].InputSlot = 0;
//	LayoutDesc[1].InputSlotClass = D3D11_INPUT_PER_VERTEX_DATA;
//	LayoutDesc[1].InstanceDataStepRate = 0;
//
//	LayoutDesc[2].SemanticName = "TEXCOORD";
//	LayoutDesc[2].SemanticIndex = 0;
//	LayoutDesc[2].AlignedByteOffset = 28;
//	LayoutDesc[2].Format = DXGI_FORMAT_R32G32_FLOAT;
//	LayoutDesc[2].InputSlot = 0;
//	LayoutDesc[2].InputSlotClass = D3D11_INPUT_PER_VERTEX_DATA;
//	LayoutDesc[2].InstanceDataStepRate = 0;
//	
//
//	if (FAILED(DEVICE->CreateDefaultInputLayout(LayoutDesc, 3
//		, _pShaderByteCode, _ShaderByteCodeSize
//		, m_InputLayout.GetAddressOf())))
//	{
//		assert(nullptr);
//	}
//
//	AddPipeLineStage(eSHADER_PIPELINE_STAGE::__VERTEX);
//
//}
//
//void CGraphicsShader::CreatePixelShader(void* _pShaderByteCode, size_t _ShaderByteCodeSize)
//{
//	DEVICE->CreatePixelShader(g_test_VS, sizeof(g_test_PS), nullptr, m_PS.GetAddressOf());
//}

void CGraphicsShader::BindData()
{
	ID3D11DeviceContext* pContext = CONTEXT;

	//Set Input Layout
	pContext->IASetInputLayout(m_InputLayout.Get());
	pContext->IASetPrimitiveTopology(m_eTopology);


	pContext->VSSetShader(m_VS.Get(), nullptr, 0);
	pContext->HSSetShader(m_HS.Get(), nullptr, 0);
	pContext->DSSetShader(m_DS.Get(), nullptr, 0);
	pContext->GSSetShader(m_GS.Get(), nullptr, 0);
	pContext->PSSetShader(m_PS.Get(), nullptr, 0);


	//Set Rasterizer
	pContext->RSSetState(CDevice::GetInst()->GetRSState(m_eRSType));

	//Set Output Merger(Depth Stencil, Blend)
	pContext->OMSetDepthStencilState(CDevice::GetInst()->GetDSState(m_eDSType), 0);
	pContext->OMSetBlendState(CDevice::GetInst()->GetBSState(m_eBSType), Vec4(0.f, 0.f, 0.f, 0.f), UINT_MAX);
}




