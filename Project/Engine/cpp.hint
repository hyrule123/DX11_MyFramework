
#define CLONE(type) public: virtual type* Clone() { return new type(*this); }

#define DEVICE  CDevice::GetInst()->GetDevice()
#define CONTEXT CDevice::GetInst()->GetDeviceContext()

#define CLONE(type) public: virtual type* Clone() { return new type(*this); }
#define CLONE_DISABLE(type) public: virtual type* Clone() { return nullptr; assert(nullptr); }

#define KEY_TAP(_eKEY) CKeyMgr::GetInst()->GetKeyState(_eKEY) == eKEY_STATE::TAP		
#define KEY_RELEASE(_eKEY) CKeyMgr::GetInst()->GetKeyState(_eKEY) == eKEY_STATE::RELEASE
#define KEY_PRESSED(_eKEY) CKeyMgr::GetInst()->GetKeyState(_eKEY) == eKEY_STATE::PRESSED

#define DELTA_TIME CTimeMgr::GetInst()->GetDeltaTime()

#define MAX_LAYER 32


#define TYPE_INDEX(Type) std::type_index(typeid(Type))

#define FLT_MAX_NEG -FLT_MAX

#define BITMASK(n) (1 << n)
#define ERROR_MESSAGE(_aStrMessage) MessageBoxA(nullptr, #_aStrMessage, NULL, MB_OK)
#define ERROR_RUNTIME(_stdRuntimeError) MessageBoxA(nullptr, _stdRuntimeError.what(), nullptr, MB_OK);

//Macro for SMALL data sized variable
#define SETTER(_Type_, _Var_, _FuncName_) void Set##_FuncName_(_Type_ _##_FuncName_) { _Var_ = _##_FuncName_; }

//Macro for SMALL data sized variable
#define GETTER(_Type_, _Var_, _FuncName_) _Type_ Get##_FuncName_() const { return _Var_; }

//Macro for SMALL data sized variable
#define GETSET(_Type_, _Var_, _FuncName_) \
void Set##_FuncName_(_Type_ _##_FuncName_) { _Var_ = _##_FuncName_; }\
_Type_ Get##_FuncName_() const { return _Var_; }

//선언 + Get
#define DECLARE_GET(_Type_, _Var_, _FuncName_) \
private: _Type_ _Var_;\
public: _Type_ Get##_FuncName_() const { return _Var_; }

//선언 + Set
#define DECLARE_SET(_Type_, _Var_, _FuncName_) \
private: _Type_ _Var_;\
public: void Set##_FuncName_(_Type_ _##_FuncName_) { _Var_ = _##_FuncName_; }

//선언 + Get + Set
#define DECLARE_GETSET(_Type_, _Var_, _FuncName_) \
private: _Type_ _Var_;\
public: _Type_ Get##_FuncName_() const { return _Var_; }\
public: void Set##_FuncName_(_Type_ _##_FuncName_) { _Var_ = _##_FuncName_; }
